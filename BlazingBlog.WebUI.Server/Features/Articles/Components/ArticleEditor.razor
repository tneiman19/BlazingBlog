@page "/article-editor"
@page "/article-editor/{ArticleId:int}"
@inject ISender Sender
@inject NavigationManager NavigationManager


@if(isEditMode && Article is not null)
{
	<PageTitle>Edit Article "@Article.Title"</PageTitle>
	<h3>Edit Article "@Article.Title"</h3>
}
else
{
	<PageTitle>Create New Article</PageTitle>
	<h3>Create New Article</h3>
}



@if(Article is not null)
{
	<EditForm Model="Article" OnSubmit="HandleSubmit" FormName="ArticleEditorForm">
		<InputText class="form-control" @bind-Value="Article.Title"/>
		<InputTextArea class="form-control" @bind-Value="Article.Content" />
		<InputDate class="form-control" @bind-Value="Article.DatePublished" />
		<div class="form-check">
			<InputCheckbox class="form-check-input" @bind-Value="Article.IsPublished" />
			<label class="form-check-label">Is Published</label>
		</div>
		<button class="btn btn-primary" type="submit">Submit</button>
	</EditForm>

	if (isEditMode)
	{
		<p>
			<form @onsubmit="DeleteArticle" @formname="DeleteArticleForm"  method="post">
				<button class="btn btn-danger">Delete Article</button>
				<AntiforgeryToken/>
			</form>
		</p>
	}
}

<span class="text-danger">@errorMessage</span>

@code {
	private bool isEditMode => ArticleId != null;
	private string errorMessage = string.Empty;
	[SupplyParameterFromForm]
	ArticleModel? Article { get; set; }
	[Parameter]
	public int? ArticleId { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		if(ArticleId is not null)
		{
			var result = await Sender.Send(
				new GetArticleByIdQuery { Id = (int)ArticleId });
			if (result.Success)
			{
				Article ??= result.Value.Adapt<ArticleModel>();
				Article.Id = (int)ArticleId;
			}
			else
			{
				SetErrorMessage(result.Error);
			}
		}
		else
		{
			Article ??= new();
		}
	}

	async Task HandleSubmit()
	{
		if(isEditMode)
		{
			var command = Article.Adapt<UpdateArticleCommand>();
			var result = await Sender.Send(command);
			if (result.Success)
			{ 
				Article = result.Value.Adapt<ArticleModel>(); 
			}	
			else
			{
				SetErrorMessage(result.Error);
			}

		}
		else
		{

			var command = Article.Adapt<CreateArticleCommand>();
			var result = await Sender.Send(command);
			if (result.Success)
			{
				NavigationManager.NavigateTo($"/article-editor/{result.Value.Id}");
			}

			else
			{
				SetErrorMessage(result.Error);
			}


		}
	}

	async Task DeleteArticle()
	{
		if (ArticleId is null)
		{
			return;
		}

		var command = new DeleteArticleCommand { Id = (int)ArticleId };
		var result = await Sender.Send(command);
		if (result.Success)
		{
			NavigationManager.NavigateTo("/articles");
		}

		else
		{
			SetErrorMessage(result.Error);
		}
		
	}

	void SetErrorMessage(string? error)
	{
		errorMessage = error ?? string.Empty;
	}
}
